/*
 * Created by SharpDevelop.
 * User: Shankar S
 * Date: 3/25/2018
 * Time: 9:04 AM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;

namespace Linked_List_With_Switch
{
	public class Node
	{
		public Node next;
		public Object value;
	}
	
	public class LinkedList
	{
		private Node head;
		private Node current;
		public int count;
		
		public LinkedList()
		{
			head=new Node();
			current=head;
		}
		
		public void AddatLast(Object data)
		{
			Node newNode=new Node();
			newNode.value=data;
			current.next=newNode;
			current=newNode;
			count++;
		}
		public void RemoveatStart()
		{
			if(count>0)
			{
				head=head.next;
				count--;
			}
			else
			{
				Console.WriteLine("No Elements are there to be Delete");
			}
		}
		
		public void AddatStart(Object data)
		{
			Node newNode=new Node();
			newNode.value=data;
			newNode.next=head.next;
			head.next=newNode;
			count++;
		}
		
		public void DisplayList()
		{
			Console.Write("Head->");
			Node current=head;
			while(current.next!=null)
			{
				current=current.next;
				Console.Write(" " + current.value);
				Console.Write("->");
			}
			Console.Write("Null\n");
		}
		public void AddAtMid(int pos,string value)
		{
			Node current = head;
			int counter=0;
			Node newnode = new Node();
			if(pos==count +1)
			{
				AddatLast(value);
			}
			else if(pos==1)
			{
				AddatStart(value);
			}
			else if(pos<=count)
			{
				while(counter!=pos)
				{
					current=current.next;
					counter++;
				}
				newnode.value=value;
				newnode.next=current.next;
				current.next=newnode;
				count++;
			}
			else
			{
				Console.WriteLine("Invalid Position");
			}
		}
		public void RemoveAtMid(int pos)
		{
			int counter =1;
			Node current=head;
			if(pos<=count&&pos>1)
			{
				while(counter!=pos)
				{
					current=current.next;
					counter++;
				}
				current.next=current.next.next;
				count--;
			}
			else if(pos==1)
			{
				RemoveatStart();
			}
			else
			{
				Console.WriteLine("Invalid Position");
			}
		}
	}
	class Program
	{
		public static void Main(string[] args)
		{
			LinkedList llist=new LinkedList();
			int choice=0;
			string data;
			int pos;
			
			while(choice!=7)
			{
				Console.WriteLine("Press\n 1 to Add at Start\n 2 to Add in Between\n 3 to Add at Last\n 4 to Delete at Start\n 5 to Delete at Mid\n 6 to Display\n 7 to Exit");
				choice=int.Parse(Console.ReadLine());
				
				switch(choice)
				{
						case 1:Console.WriteLine("Enter the Data");
						data=Console.ReadLine();
						llist.AddatStart(data);
						break;
						
						case 2:Console.WriteLine("Enter the Position");
						pos=int.Parse(Console.ReadLine());
						Console.WriteLine("Enter the Data");
						data=Console.ReadLine();
						llist.AddAtMid(pos,data);
						break;
						
						case 3:Console.WriteLine("Enter the Data");
						data=Console.ReadLine();
						llist.AddatLast(data);
				        break;
						
						case 4:llist.RemoveatStart();
						break;
						
						case 5:Console.WriteLine("Enter the Position");
						pos=int.Parse(Console.ReadLine());
						llist.RemoveAtMid(pos);
						break;
						
						case 6:Console.WriteLine("The datas in the List");
						llist.DisplayList();
						break;
						
						case 7:Console.WriteLine("Exit Successfully");
						break;
						
						default:Console.WriteLine("Invalid Input");
						break;
						
						
				}
			}
			
			Console.Write("Press any key to continue . . . ");
			Console.ReadKey(true);
		}
	}
}
